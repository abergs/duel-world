{"version":3,"sources":["features/questions/roundSlice.ts","features/nav/navSlice.ts","screen.tsx","features/questions/alternative.tsx","classNames.ts","useSelector.ts","features/sound.ts","components/button.tsx","features/questions/answerScreen.tsx","QuestionScreen.tsx","features/questions/roundScreen.tsx","Game.tsx","App.tsx","assets/button1.mp3","assets/button2.mp3","assets/tickHorror.mp3","assets/bubbleNegative.mp3","assets/errorbuzz.mp3","assets/chime.mp3","assets/bubbles.mp3","assets/fart.mp3","serviceWorker.js","rootReducer.ts","store.ts","index.js"],"names":["countries","capitals","map","x","City","Country","createCapitalOfQuestion","q","getRandomly","template","alternatives","createAlt","array","i","length","j","Math","floor","random","shuffleArray","id","text","time","type","points","myArray","roundSlice","createSlice","name","initialState","roundId","questions","answers","currentQuestion","myScore","status","reducers","startRound","state","push","answerQuestion","action","finalQ","alternative","payload","nextQuestion","actions","navSlice","path","setPath","console","log","extraReducers","Screen","props","className","children","Alternative","obj","isMine","isCorrect","Object","entries","k","join","onClick","e","useSelector","useReduxSelector","beep1","Howl","src","beepMp3","beep2","beep2Mp3","tickHorror","tickHorrorMp3","errorbuzz","errorbuzzMp3","popNegative","bubbleNegativeMp3","chime","chimeMp3","bubbles","bubblesmp3","volume","fart","fartmp3","Button","play","AnswerScreen","round","question","dispatch","useDispatch","myAnswer","mine","key","NO_ALTERNATIVE","throttle","func","limit","inThrottle","args","arguments","context","this","apply","setTimeout","beep","horror","QuestionScreen","useState","seconds","setSeconds","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useInterval","ceilSeconds","ceil","y","RoundScreen","window","innerWidth","innerHeight","xy","setxy","recycle","setrecycle","max","clientX","clientY","confettiSource","w","h","Game","nav","WelcomeWizard","setName","setPlay","placeholder","value","onChange","target","App","module","exports","Boolean","location","hostname","match","rootReducer","combineReducers","navReducer","roundReducer","store","configureStore","reducer","require","default","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c3e516b.chunk.js","sourcesContent":["import { createSlice, PayloadAction, createSelector } from \"redux-starter-kit\";\r\nimport { string } from \"prop-types\";\r\nimport QuestionScreen from \"QuestionScreen\";\r\nimport { useSelector } from \"react-redux\";\r\nimport capitals from \"assets/capitals.json\";\r\n\r\nconst cities = capitals.map(x => x.City);\r\nconst countries = capitals.map(x => x.Country);\r\n\r\n// const cap2 = capitals.filter(x => x.City && x.Country).map(x => {return { City: x.City, Country: x.Country  }});\r\n// console.log(JSON.stringify(cap2));\r\n\r\n\r\nfunction shuffleArray(array:any[]) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n}\r\n\r\n// create questions \r\nfunction createCapitalOfQuestion() {\r\n\r\n  const q = getRandomly(capitals);\r\n\r\n  const template = \"In what country is \" + q.City + \" the capital?\"\r\n\r\n  // const correctAlt = q;\r\n  let alternatives = [\r\n    createAlt(getRandomly(countries)),\r\n    createAlt(getRandomly(countries)),\r\n    createAlt(getRandomly(countries)),\r\n    createAlt(q.Country, 5)\r\n  ];\r\n\r\n  shuffleArray(alternatives);\r\n\r\n  var output: IQuestion = {\r\n    id: template,\r\n    text: template,\r\n    time: 10,\r\n    type: \"capitalof\",\r\n    alternatives: alternatives\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction createAlt(text: string, points?: number): IAlternative {\r\n  return {\r\n    text: text,\r\n    points: points || 0\r\n  }\r\n}\r\n\r\nfunction getRandomly(myArray:any[]) {\r\n  var rand = myArray[Math.floor(Math.random() * myArray.length)];\r\n  return rand;\r\n}\r\n\r\n\r\nconst alternatives = [\r\n  {\r\n    text: \"France\",\r\n    points: 0\r\n  },\r\n  {\r\n    text: \"Serbia\",\r\n    points: 0\r\n  },\r\n  {\r\n    text: \"Scotland\",\r\n    points: 0\r\n  },\r\n  {\r\n    text: \"Ireland\",\r\n    points: 5\r\n  }\r\n];\r\n\r\nexport interface IAlternative {\r\n  text: string;\r\n  points: number;\r\n}\r\n\r\nexport interface IAnswer {\r\n  correct: boolean;\r\n  alternative: IAlternative;\r\n}\r\n\r\nexport interface IQuestion {\r\n  id: string;\r\n  type: \"capitalof\" | \"countryof\";\r\n  text: string;\r\n  alternatives: IAlternative[];\r\n  time: number;\r\n}\r\n\r\nconst QUESTION: IQuestion = {\r\n  id: \"\",\r\n  type: \"countryof\",\r\n  text: \"In what country is Paris the capital?\",\r\n  alternatives: alternatives,\r\n  time: 10\r\n};\r\n\r\nexport interface IRoundState {\r\n  roundId: string;\r\n  questions: IQuestion[];\r\n  currentQuestion: number;\r\n  status: \"not-started\" | \"started\" | \"finished\" | \"answered\";\r\n  myScore: number;\r\n  answers: { [question: string]: { [player: string]: string } };\r\n}\r\n\r\nfunction cq(city: string): IQuestion {\r\n  return {\r\n    id: \"\",\r\n    type: \"countryof\",\r\n    text: \"In what country is \" + city + \" the capital?\",\r\n    alternatives: alternatives,\r\n    time: 10\r\n  };\r\n}\r\n\r\nconst initState: IRoundState = {\r\n  roundId: \"1\",\r\n  questions: [],\r\n  answers: {},\r\n  currentQuestion: 0,\r\n  myScore: 0,\r\n  status: \"not-started\"\r\n};\r\n\r\nconst roundSlice = createSlice({\r\n  name: \"round\",\r\n  initialState: initState,\r\n  reducers: {\r\n    startRound: state => {\r\n      state.status = \"started\";\r\n      state.currentQuestion = 0;\r\n      state.myScore = 0;\r\n\r\n      state.questions = [];\r\n      state.questions.push(createCapitalOfQuestion());\r\n      state.questions.push(createCapitalOfQuestion());\r\n      state.questions.push(createCapitalOfQuestion());\r\n\r\n    },\r\n    answerQuestion: (state, action) => {\r\n      const finalQ = state.questions.length - 1;\r\n      var alternative = action.payload as IAlternative;\r\n      var q = state.questions[state.currentQuestion];\r\n      const player = \"p1\";\r\n\r\n      if (!state.answers[q.text]) state.answers[q.text] = {};\r\n      state.answers[q.text][player] = alternative.text || \"\";\r\n\r\n      if (state.currentQuestion <= finalQ) {\r\n        state.myScore += alternative.points;\r\n      }\r\n\r\n      state.status = \"answered\";\r\n    },\r\n    nextQuestion: (state, action) => {\r\n      const finalQ = state.questions.length - 1;\r\n      if (state.currentQuestion == finalQ) {\r\n        state.status = \"finished\";\r\n      } else if (state.currentQuestion < finalQ) {\r\n        // next question\r\n        state.currentQuestion++;\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nexport const { startRound, answerQuestion, nextQuestion } = roundSlice.actions;\r\n\r\nexport default roundSlice.reducer;\r\n","import { createSlice, PayloadAction } from 'redux-starter-kit'\r\n\r\nimport { answerQuestion,nextQuestion } from \"features/questions/roundSlice\";\r\n\r\nconst navSlice = createSlice({\r\n    name: 'nav',\r\n    initialState: { path: 'root' },    \r\n    reducers: {\r\n        setPath: (state, action) => {\r\n                const path = action.payload;\r\n                state.path = path;\r\n                console.log(\"state\", path);\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [answerQuestion.type]: (state, action) => {\r\n            state.path = \"answer\";\r\n        },\r\n        [nextQuestion.type]: (state, action) => {\r\n            state.path = \"question\";\r\n        }\r\n    }\r\n})\r\n\r\nexport const { setPath } = navSlice.actions\r\n\r\nexport default navSlice.reducer;\r\n\r\n","import React from \"react\";\r\n\r\nexport function Screen(props:any) {\r\n    return <div className=\"screen\">{props.children}</div>\r\n}","import React, { useState } from \"react\";\r\nimport { IAlternative } from \"./roundSlice\";\r\nimport classnames from \"classNames\";\r\nimport posed from 'react-pose';\r\n\r\n\r\nexport interface IAlternativeProps {\r\n  text: string;\r\n  onClick?: (text: string) => void;\r\n  isMine?: boolean;\r\n  isCorrect?: boolean;\r\n}\r\n\r\n\r\nexport default function Alternative(props: IAlternativeProps) {\r\n  const text = props.text;\r\n  \r\n  const onC = (e: any) => {\r\n    //props.setPath(e.target.innerText)\r\n    if (props.onClick) {\r\n      props.onClick(text);\r\n    }\r\n  };\r\n\r\n  // const Box = posed.div({\r\n  //   pressable: true,\r\n  //   init: { scale: 1 },\r\n  //   press: { scale: 0.8 },\r\n  //   onPoseComplete: p\r\n  // });\r\n\r\n  return (\r\n    <div className={classnames({\"alternative\":true, \"isMine\": props.isMine, \"isCorrect\": props.isCorrect})} onClick={onC}>\r\n      {text}\r\n    </div>\r\n  );\r\n}\r\n","export default function classnames(obj: { [className:string]:any }){\r\n    return Object.entries(obj).map( ([k,v]) => v?k:'' ).join(' ');\r\n   }","import {\r\n    useSelector as useReduxSelector,\r\n    TypedUseSelectorHook,\r\n  } from 'react-redux'\r\n  import { RootState } from './rootReducer'\r\n  \r\n  export const useSelector: TypedUseSelectorHook<RootState> = useReduxSelector","import {Howl, Howler} from 'howler';\r\n\r\nimport beepMp3 from 'assets/button1.mp3'\r\nimport beep2Mp3 from 'assets/button2.mp3'\r\nimport tickHorrorMp3 from 'assets/tickHorror.mp3'\r\nimport bubbleNegativeMp3 from 'assets/bubbleNegative.mp3'\r\nimport errorbuzzMp3 from 'assets/errorbuzz.mp3'\r\nimport chimeMp3 from 'assets/chime.mp3'\r\n\r\nimport bubblesmp3 from 'assets/bubbles.mp3'\r\nimport fartmp3 from 'assets/fart.mp3'\r\n\r\nexport const beep1 = new Howl({src: beepMp3});\r\nexport const beep2 = new Howl({src: beep2Mp3});\r\nexport const tickHorror = new Howl({src:tickHorrorMp3});\r\n\r\nexport const errorbuzz = new Howl({src:errorbuzzMp3});\r\nexport const popNegative = new Howl({src:bubbleNegativeMp3});\r\nexport const chime = new Howl({src:chimeMp3});\r\n\r\nexport const bubbles = new Howl({src:bubblesmp3, volume:0.04});\r\nexport const fart = new Howl({src:fartmp3});\r\n\r\n","import React from \"react\";\r\nimport {beep2} from \"features/sound\"\r\n\r\nexport interface IButtonProps {\r\n    onClick: (e: React.MouseEvent) => void\r\n    children: any;\r\n}\r\n\r\nexport default function Button (props: IButtonProps) {\r\n\r\n    const click = (e:React.MouseEvent) => {\r\n        beep2.play();\r\n        props.onClick(e);\r\n    }\r\n\r\n    return <button onClick={click}>{props.children}</button>\r\n}","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Screen } from \"screen\";\r\nimport Alternative from \"features/questions/alternative\";\r\nimport { useSelector } from \"useSelector\";\r\nimport {setPath} from \"features/nav/navSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { IQuestion, IAlternative, answerQuestion, startRound, nextQuestion } from \"features/questions/roundSlice\";\r\nimport { beep1, beep2, tickHorror, popNegative, errorbuzz } from \"features/sound\";\r\nimport Button from \"components/button\";\r\n\r\n\r\n/**\r\n * \r\n * Display questsions\r\n * Run timer\r\n * Report progress to get new current question\r\n * \r\n */\r\nexport default function AnswerScreen(props:any) {\r\n\r\n  const round = useSelector(state => state.round);\r\n\r\n  const question: IQuestion = round.questions[round.currentQuestion]\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const alternatives = question.alternatives;\r\n\r\n  const player = \"p1\";\r\n  const myAnswer = round.answers[question.text] && round.answers[question.text][player]; // alt1\r\n  console.log(\"myanswer\", myAnswer, round.answers);\r\n  \r\n\r\n  const answerHandler = (alternative: IAlternative) => {\r\n    console.log(\"Answered\", alternative);\r\n    dispatch(answerQuestion(alternative));\r\n  }\r\n\r\n  return <Screen>\r\n    <h1>{question.text}</h1>\r\n    <p>Your points: {round.myScore}</p>\r\n\r\n    <div className=\"alternatives\">\r\n      {alternatives.map(x => {\r\n        const isCorrect = x.points > 0;\r\n        const mine = x.text == myAnswer;\r\n        \r\n        // const players = round.answers[question.id].where(x => ); // answers { q1: a}\r\n\r\n\r\n        return <Alternative text={x.text} isCorrect={isCorrect} isMine={mine} key={x.text} />}\r\n        )}\r\n      \r\n    </div>\r\n    <Button onClick={() => dispatch(nextQuestion())}>Continue</Button>\r\n  </Screen>;\r\n}","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Screen } from \"./screen\";\r\nimport Alternative from \"./features/questions/alternative\";\r\nimport { useSelector } from \"useSelector\";\r\nimport {setPath} from \"features/nav/navSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { IQuestion, IAlternative, answerQuestion, startRound } from \"features/questions/roundSlice\";\r\nimport { beep1, beep2, tickHorror, popNegative, errorbuzz, chime } from \"features/sound\";\r\n\r\nfunction useInterval(callback:any, delay:number|null) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      // @ts-ignore\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nconst NO_ALTERNATIVE ={\r\n  text: \"\",\r\n  points:0\r\n};\r\n\r\n// const throttle = (func:any, limit:any) => {\r\n//   let lastFunc:any;\r\n//   let lastRan:any;\r\n//   return function() {\r\n//     // @ts-ignore\r\n//     const context:any = this;\r\n//     const args = arguments\r\n//     if (!lastRan) {\r\n//       func.apply(context, args)\r\n//       lastRan = Date.now()\r\n//     } else {\r\n//       clearTimeout(lastFunc)\r\n//       lastFunc = setTimeout(function() {\r\n//         if ((Date.now() - lastRan) >= limit) {\r\n//           func.apply(context, args)\r\n//           lastRan = Date.now()\r\n//         }\r\n//       }, limit - (Date.now() - lastRan))\r\n//     }\r\n//   }\r\n// }\r\n\r\n// @ts-ignore\r\nconst throttle = (func, limit) => {\r\n  // @ts-ignore\r\n  let inThrottle\r\n  return function() {\r\n    const args = arguments\r\n    // @ts-ignore\r\n    const context = this\r\n    // @ts-ignore\r\n    if (!inThrottle) {\r\n      func.apply(context, args)\r\n      inThrottle = true\r\n      setTimeout(() => inThrottle = false, limit)\r\n    }\r\n  }\r\n}\r\n\r\nvar beep = throttle(() => beep1.play(), 1000);\r\nvar horror = throttle(() => tickHorror.play(), 1000);\r\n\r\n/**\r\n * \r\n * Display questsions\r\n * Run timer\r\n * Report progress to get new current question\r\n * \r\n */\r\nexport default function QuestionScreen(props:any) {\r\n\r\n  const round = useSelector(state => state.round);\r\n  const question: IQuestion = round.questions[round.currentQuestion]\r\n\r\n  const dispatch = useDispatch()\r\n  let [seconds, setSeconds] = useState(10);\r\n  let delay = seconds < -1 ? null : 100;\r\n  \r\n\r\n  useInterval(() => {\r\n    // Your custom logic here\r\n    if(seconds <= 0) {\r\n      errorbuzz.play();\r\n      // if zero, play loose\r\n      dispatch(answerQuestion(NO_ALTERNATIVE));\r\n      // setSeconds(-1);\r\n      return;\r\n    }\r\n    else if (seconds <= 3) {\r\n      horror();\r\n    } else if(seconds) {\r\n      beep();\r\n    }\r\n    \r\n    let thisQ = question.text;\r\n    \r\n    setSeconds(seconds - .1);\r\n    \r\n    \r\n  }, delay);\r\n\r\n  const alternatives = question.alternatives;\r\n\r\n  const answerHandler = (alternative: IAlternative) => {\r\n    console.log(\"Answered\", alternative);\r\n    if(alternative.points < 1) {\r\n      popNegative.play();\r\n    } else {\r\n      chime.play();\r\n    }\r\n    dispatch(answerQuestion(alternative));\r\n    setSeconds(10);    \r\n  }\r\n\r\n  const ceilSeconds = Math.ceil(seconds);\r\n\r\n  return <Screen>\r\n    <h1>{question.text}</h1>\r\n    <p>&nbsp;</p>\r\n\r\n    <div className=\"alternatives\">\r\n      {alternatives.map(x => <Alternative text={x.text} onClick={(y:string) => answerHandler(x)} key={x.text} />)}\r\n    </div>\r\n\r\n    <div className=\"timerbar\" key={question.text}>\r\n      <div className=\"value\"><span className={ceilSeconds % 2 == 0 ? \"anim0\": \"\"}>{ceilSeconds}</span></div>\r\n    </div>\r\n  </Screen>;\r\n}","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Screen } from \"screen\";\r\nimport Alternative from \"features/questions/alternative\";\r\nimport { useSelector } from \"useSelector\";\r\nimport { setPath } from \"features/nav/navSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  IQuestion,\r\n  IAlternative,\r\n  answerQuestion,\r\n  startRound\r\n} from \"features/questions/roundSlice\";\r\nimport QuestionScreen from \"QuestionScreen\";\r\nimport Button from \"components/button\";\r\nimport Confetti from 'react-confetti';\r\nimport {chime, fart, bubbles} from \"features/sound\";\r\n\r\n\r\n/**\r\n *\r\n * Display questsions\r\n * Run timer\r\n * Report progress to get new current question\r\n *\r\n */\r\n\r\nfunction getRandomInt(max: number) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n  }\r\n\r\nexport default function RoundScreen(props: any) {\r\n  const round = useSelector(state => state.round);\r\n  const dispatch = useDispatch();\r\n  const [xy, setxy] = useState([window.innerWidth / 2,window.innerHeight / 2]);\r\n  const [recycle, setrecycle] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     const timer = setTimeout(() => {\r\n//       console.log('This will run after 1 second!')\r\n//       setrecycle(false);\r\n//     }, 1000);\r\n//     return () => clearTimeout(timer);\r\n//   }, []);\r\n\r\n  if (round.status == \"not-started\") {\r\n    return (\r\n      <Screen>\r\n        <h1>Start the round!</h1>\r\n        <button\r\n          onClick={e => {\r\n            dispatch(setPath(\"question\"));\r\n            dispatch(startRound());\r\n          }}\r\n        >\r\n          Start!\r\n        </button>\r\n      </Screen>\r\n    );\r\n  }\r\n\r\n  const onC = (e:React.MouseEvent) => {\r\n      console.log(e.clientX, e.clientY);\r\n      setxy([e.clientX, e.clientY]);\r\n      setrecycle(true);\r\n      setTimeout(() => {\r\n          setrecycle(false)\r\n      }, 500);\r\n      \r\n      if(getRandomInt(10) === 0) {\r\n          fart.play();\r\n      } else {\r\n          bubbles.play();\r\n      }\r\n\r\n  }\r\n\r\n  if (round.status == \"finished\") {\r\n    return (\r\n        <div className=\"fullscreen\" onClick={onC}>\r\n      <Screen>\r\n           <Confetti\r\n            recycle={recycle}\r\n            confettiSource={{\r\n                x: xy[0],\r\n                y: xy[1],\r\n                w: 0,\r\n                h: 0\r\n            }}\r\n           />\r\n        <h1>Your Score is {round.myScore}</h1>\r\n        <Button onClick={e => dispatch(startRound())}>Restart</Button>\r\n      </Screen>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <QuestionScreen />;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { WelcomeWizard } from \"./App\";\r\nimport QuestionScreen from \"./QuestionScreen\";\r\nimport AnswerScreen from \"./features/questions/answerScreen\";\r\nimport RoundScreen from \"features/questions/roundScreen\";\r\n\r\nimport { useSelector } from \"useSelector\";\r\nimport {setPath} from \"features/nav/navSlice\";\r\n/**\r\n * Switches between all the screens\r\n */\r\nexport function Game() {\r\n  const nav = useSelector(state => state.nav);\r\n\r\n  switch (nav.path) {\r\n    case \"root\": // return <WelcomeWizard />;\r\n    case \"round\":\r\n    case \"question\":\r\n    return <RoundScreen />;\r\n    case \"answer\": return <AnswerScreen />;\r\n    // case \"question\": return <QuestionScreen />;\r\n  }\r\n    \r\n  return <WelcomeWizard />\r\n}\r\n\r\n\r\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport { Screen } from \"./screen\";\nimport \"./App.css\";\nimport { connect, useDispatch } from 'react-redux'\nimport { Game } from \"./Game\";\nimport {setPath} from \"features/nav/navSlice\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Game />\n      </header>\n    </div>\n  );\n}\n\n/**\n *\n * Logo, intro\n * Pick name\n * Pick avatar\n * Invite friend\n *\n */\n\nexport function WelcomeWizard() {\n  var [name, setName] = useState(\"\");\n  var [isPlaying, setPlay] = useState(false);\n  const dispatch = useDispatch();\n\n  return (\n    <Screen>\n      <h1>Duel World</h1>\n\n      <label>What should we call you?</label>\n      <input\n        type=\"text\"\n        placeholder=\"AndyPandy\"\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n\n      <button\n        onClick={e => {\n          setPlay(true);\n          dispatch(setPath(\"round\"));\n        }}\n      >\n        Play\n      </button>\n    </Screen>\n  );\n}\n\n/**\n *\n * Shows a list of your ongoing and historic duels\n * Create new duel\n * Invite friend\n *\n */\nfunction Duels() {}\n\n/**\n *\n * Shows top players\n * Show top friends-of-friends(?)\n *\n */\nfunction People() {}\n\n/** Shows rounds history(?) starts next round? */\nfunction Duel() {}\n\n/**\n *\n * Displays questions, shows progress, display effects\n * Track scores and bonuses\n *\n */\nfunction RoundPlay() {}\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/button1.97aa97e2.mp3\";","module.exports = __webpack_public_path__ + \"static/media/button2.3dfc9042.mp3\";","module.exports = __webpack_public_path__ + \"static/media/tickHorror.57aa7ab9.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bubbleNegative.a992299e.mp3\";","module.exports = __webpack_public_path__ + \"static/media/errorbuzz.20df5d64.mp3\";","module.exports = __webpack_public_path__ + \"static/media/chime.6cbb16a2.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bubbles.5e6c4969.mp3\";","module.exports = __webpack_public_path__ + \"static/media/fart.c70c2022.mp3\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux-starter-kit'\r\nimport navReducer from \"./features/nav/navSlice\";\r\nimport roundReducer from \"./features/questions/roundSlice\";\r\n\r\nconst rootReducer = combineReducers({\r\n    nav: navReducer,\r\n    round: roundReducer\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nexport default rootReducer\r\n\r\n","import { configureStore } from 'redux-starter-kit'\r\n\r\nimport rootReducer from './rootReducer'\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer\r\n})\r\n\r\n// @ts-ignore\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n  // @ts-ignore\r\n    module.hot.accept('./rootReducer', () => {\r\n    const newRootReducer = require('./rootReducer').default\r\n    store.replaceReducer(newRootReducer)\r\n  })\r\n}\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\n\nimport store from './store'\n\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nconst render = () => {\n    const App = require('./App').default\n  \n    ReactDOM.render(\n      <Provider store={store}>\n        <App />\n      </Provider>,\n      document.getElementById('root')\n    )\n  }\n  \n  render()\n  \n  if (process.env.NODE_ENV === 'development' && module.hot) {\n    module.hot.accept('./App', render)\n  }\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}